{
  "articles/denoising.html": {
    "href": "articles/denoising.html",
    "title": "Overview | Clustar",
    "keywords": "Overview The first step in the group-detection pipeline is to reduce the background noise in the raw FITS image data. In the Clustar package, all of the methods involved in the denoising step are listed in the denoise.py module. Circle Crop Given that most of the noise in a FITS file is concentrated around the corners of the image, we begin the preprocessing by transforming the square FITS image into a circle. In particular, the crop method is implemented to remove the intensities in the corners. Here, the user can define two optional parameters: radius_factor and apply_gradient . The radius_factor is number within the range $[0, 1]$ that is multiplied to the radius of the cropping circle; this determines the size of the circle. Shown below are three examples of how the radius_factor affects the cropping circle. The apply_gradient parameter determines if the FITS image should be multiplied by a gradient in order to elevate central points. With this multiplication, the erratic intensities that are located further away from the center are more likely to be accounted as noise. Shown below is the radial gradient that is multiplied to the FITS data. Grid Computation The straightforward method for noise reduction is to determine a target threshold and automatically set all intensities below that threshold to zero. In sigma clipping , the noise is assumed to follow a Gaussian distribution; from this, the standard deviation $(\\sigma)$ and the median $(m)$ of the dataset are calculated. Given a coefficient, $\\alpha$, any value that lies outside of the range $m \\pm \\alpha \\sigma$ is considered to be noise. Inspired by sigma clipping, our denoising algorithm divides the FITS image to $n \\times n$ grid (package keyword chunks parameter specifies $n$). For each cell in this grid, the root mean square (RMS) of the intensities are calculated. Given a quantile probability between $[0, 1]$, the specified quantile of all the RMS in the grid denotes the baseline noise threshold. The target threshold is obtained by multiplying this baseline threshold to a given sigma coefficient. All intensities below this target threshold are set to zero. Note Since the chunks parameter determines the size of the grid, the computational complexity of the denoising process is tied to this parameter. On the backend, the package implements multithreading to expedite this process; the RMS value for each cell is run on a separate thread. For comparable results, it is recommened that the value of the chunks parameter is $3$, $5$, or $7$. Denoise In the denoise.py module, the resolve method performs the entire denoising process, according to the specified ClustarData parameters. Shown below is the example FITS image before and after the denoising process; here, the background noise is removed."
  },
  "articles/fitting.html": {
    "href": "articles/fitting.html",
    "title": "Overview | Clustar",
    "keywords": "Overview The last step in the group-detection pipeline is fitting a bivariate Gaussian model on each of the detected groups in order to find anomalous groups (i.e. do not conform to the bivariate Gaussian shape). In this package, all of the fitting-related methods are listed in the module fit.py . Fit Bivariate Gaussian Generally, many protostellar objects have a disk-like shape that conforms to a bivariate Gaussian distribution. The input parameters for this model are the two-dimensional weighted means and the associated covariance matrix. In the Clustar package, the compute_fit method calculates the respective bivariate Gaussian model for each detected group in the FITS image. Then, a min-max normalization is performed on the bivariate Gaussian model with respect to the original data. The residuals are obtained by taking the difference of the intensities between the model and the observed data. Shown below are the normalized bivariate Gaussian models (depicted on the right) associated with each detection (depicted on the left), given the previous FITS image. Ellipse Construction Although the min-max normalization aligns the model to the original data, this process causes the tail ends of the bivariate Gaussian model be an unreliable estimate. To exclude these tail ends, the compute_ellipse method constructs an ellipse from the respective group statistics. The alpha parameter designates the size of this ellipse in relation to the $\\chi^2$ distribution. Shown below is a depiction of how the alpha parameter affects the size of the ellipse. Residual Analysis Before the residuals are converted into a numerical score, the absolute value of the residuals inside of the ellipse are taken and these values are binned between $[0, 1]$ in the compute_metrics method. Shown below are the processed residuals for the previously depicted groups. Given a metric (e.g. average, standard deviation, variance) and a threshold , these processed residuals can help determine which detections conform to the model bivariate Gaussian as well as those that do not. For this package, the default is set the variance metric at a threshold of $0.01$. From the sample FITS image, the variances of these residuals are $0.1483$ and $0.0028$ for groups 1 and 2, respectively. Since the first group's score exceeds the default threshold, this group is flagged for manual review (depicted in red). In contrast, the second group's score is below the default threshold; as a result, this group conforms to the model bivariate Gaussian shape (depicted in green)."
  },
  "articles/grouping.html": {
    "href": "articles/grouping.html",
    "title": "Overview | Clustar",
    "keywords": "Overview After denoising the image, the next step is to arrange the remaining nonzero intensities into groups, while accounting for any outliers. In the module group.py , all of the methods related to this step are listed. Arrange Points In this package, the arrange method organizes the nonzero intensities into groups based on their proximity. A group is defined as set of neighboring intensities, and a group-range delimits the bounds of a group. Given an integer buffer_size , all nonzero points that lie within this group-range are accounted as one group; particularly, the buffer_size is the number of pixels around the group that are examined for nonzero intensities. Shown below is a figure of how the buffer_size parameter affects the grouping. For both images, pixels containing zero intensities are depicted in purple, while those containing nonzero intensities are shown in yellow. The group arrangements are represented by the green squares. On the left, a buffer_size of $1$ yields three groups; on the right, a buffer_size of $2$ yields two groups. From these preliminary group-ranges, the rectify method ensures that these group-ranges are squares (i.e. height and width of groups are equivalent). Next, the merge method eliminates all smaller group-ranges that lie completely inside a larger group-range; this step makes sure that the labeled groups are independent. Outlier Filtration Even after denoising, the resulting data could still contain nonzero intensities that represent noise. The refine method accounts for these outliers by employing the group_size and/or group_factor specifications. The group_size parameter defines the minimum number of nonzero points that determines a group. Similarly, the group_factor ratio (lies within $[0, 1]$) specifies the minimum number of nonzero points that determines a group in relation to the number of nonzero points in the largest group. After this step, the extract method pulls the original FITS data for each group, given the group-range. Lastly, the screen method removes groups that are faint and distant from the center of the FITS image. To accomplish this, the screen method calculates the maximum intensity in the remaining groups relative to the entire FITS image as well as the Euclidean distance of the groups' center to the image center. Given that both of these metrics are strictly less than $1$, the arithmetic mean of these measures yields an \"outlier score.\" If this score is less than the default threshold of $0.25$, then that group is considered to be an outlier and is subsequently removed. Shown below are the two detected groups from the previously denoised FITS image. Group Statistics From the remaining groups, the calculate method computes the following statistics on the group data. Statistic Definition x_bar Average of index values in the 'x' position weighted by the corresponding group data. y_bar Average of index values in the 'y' position weighted by the corresponding group data. x_var Variance of index values in the 'x' position weighted by the corresponding group data. y_var Variance of index values in the 'y' position weighted by the corresponding group data. covariance Covariance of the index values weighted by the corresponding group data. covariance_matrix Covariance matrix for the multivariate normal that is used in the fitting process. rho Correlation coefficient computed from the covariance matrix. eigen_values Eigenvalues obtained from the eigendecomposition of the covariance matrix. eigen_vectors Eigenvectors obtained from the eigendecomposition of the covariance matrix. x_len Length of the major axis of the ellipse in pixels. y_len Length of the minor axis of the ellipse in pixels. radians Rotation of ellipse denoted in radians. degrees Rotation of ellipse denoted in degrees."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Motivation | Clustar",
    "keywords": "Motivation The National Radio Astronomy Observatoryâ€™s ALMA science archive contains over a petabyte of astronomical images which has been collected by the Atacama Large Millimeter/sub-millimeter Array (ALMA) telescope over the last decade. While the archive data is publicly available, the task for astronomers to manually search through thousands of images and ascertain the type and physical properties of unusual celestial objects is immensely labor intensive. As a result, an exhaustive manual search of the archive is unlikely to be comprehensive and creates the potential for astronomers to miss out on faint objects that were not the primary target of the telescope exposure. For these reasons, the goal of our Clustar package is to programmatically identify protostars/protoplanetary disks from astronomical data contained in these images. Data The astronomical data stored in the ALMA archive is contained in Flexible Image Transport System (FITS) format. FITS files store this data in multi-dimensional arrays (one-dimensional spectra, two-dimensional images, or three-dimensional data cubes). In addition to this data, FITS files generally include a header object that contains statistics, logs, and other details relevant to the image. Shown below is the image and header information from a FITS file in the Tobin et al. dataset. The contents within this FITS file are accessed by implementing the fits method from the astropy package; subsequently, the FITS image is visualized by using the imshow method from the matplotlib package. from astropy.io import fits import matplotlib.pyplot as plt # Path to FITS file. path = '~/HOPS-290_cont_robust0.5.pbcor.fits' # Open FITS file. file = fits.open(path) # Image data from the FITS file. image = file[0].data[0, 0, :, :] # Header information from the FITS file. header = file[0].header # Visualize FITS image. plt.figure(figsize=(10, 10), dpi=180) plt.imshow(image, origin='lower') plt.title(header['OBJECT']) plt.colorbar() plt.show() Pipeline In the Clustar package, the detection of protostars or protoplanetary disks is built on top of the following pipeline. First, the raw FITS image undergoes a preprocessing step to reduce the background noise. From this denoised image, the nonzero intensities (i.e. the data from the FITS image) are arranged into groups based on their proximity. Next, these formulated groups undergo a filtration process to remove any outliers. Given the remaining groups, a model bivariate gaussian is generated from the respective group statistics (e.g. mean, variance). Then, the residuals are calculated by subtracting the model from the original group data. Finally, these residuals are compared to a user-defined metric and threshold in order to demarcate which groups are flagged for manual review. In summary, this entire pipeline can be condensed into three main steps: denoising, grouping, and fitting. Given a FITS image, the ClustarData object executes this pipeline for detecting groups and stores all relevant data associated with each group. Shown below is the sample output for the FITS file described above. The detection shown in the green box conforms to a model bivariate gaussian, whereas the detection shown in the red box is flagged for manual review since variance of the residuals exceeds the user-defined threshold. from clustar.core import ClustarData # Create the 'ClustarData' object by specifying the path to FITS file. cd = ClustarData(path='~/HOPS-290_cont_robust0.5.pbcor.fits') # Visualize the detected groups. cd.identify()"
  },
  "documentation/core.html": {
    "href": "documentation/core.html",
    "title": "Core | Clustar",
    "keywords": "Core Contains the ClustarData class, which is responsible for executing the entire project pipeline for detecting groups in a single FITS image; this class also collects and stores all relevant data, statistics, and variables in this pipeline. ClustarData A class for executing the entire pipline for detecting groups in a FITS image and for storing all relevant data associated with each group. Parameters path : ( str ) Path to FITS file. **kwargs : (optional) See ~clustar.core.ClustarData.params for other possible arguments. Attributes path : ( str ) Path to FITS file. image : ( Image ) Internal class for storing FITS image variables. params : ( Params ) Internal class for specifying the ClustarData parameters. groups : ( list ) List of Group objects extracted from the given FITS image. flag : ( bool ) Holds True if any detected group in the FITS image is flagged for manual review, otherwise False . Examples from clustar.core import ClustarData # Create the 'ClustarData' object by specifying the path to FITS file. cd = ClustarData(path='~/data/example.fits', threshold=0.025) # Visualize the detected groups. cd.identify() # Access individual 'Group' objects. cd.groups Image An internal ClustarData subclass for storing FITS image variables. Parameters data : ( ndarray ) Raw data from the FITS image; must be 2-D. header : ( dict ) Header dictionary stored in FITS file. Attributes clean : ( ndarray ) Data from the FITS image after denoising process. x : ( ndarray ) Index values of the 'x' position from the data. y : ( ndarray ) Index values of the 'y' position from the data. pos : ( ndarray ) Index values of the data, given as (x, y). nonzero : ( ndarray ) Index values of nonzero points in the data. std : ( ndarray ) Standard deviation values from each block in the grid composed in the denoise process; used to calculate the noise statistic. rms : ( ndarray ) Root mean squared values from each block in the grid composed in the denoise process; used to calculate the noise statistic. noise : ( float ) Noise statistic generated for the denoise process; values less than noise times sigma are set to zero. major : ( float ) Length of the major axis for the beam. minor : ( float ) Length of the minor axis for the beam. degrees : ( float ) Degrees of rotation for the beam. area : ( float ) Number of points inside the beam; used to identify groups smaller than the beam size. Raises KeyError : If the following keys are missing from the FITS header: BMAJ , BMIN , BPA , CDELT1 , CDELT2 , and OBJECT . Group An internal ClustarData class for storing variables associated to a detection. Parameters bounds : ( list ) List of four integers corresponding to minimum row value, maximum row value, minimum column value, and maximum column value in this order. Attributes image : ( _Image ) Internal subclass for storing image variables. res : ( _Res ) Internal subclass for storing residual variables. fit : ( _Fit ) Internal subclass for storing fit variables. stats : ( _Stats ) Internal subclass for storing statistics. metrics : ( _Metrics ) Internal subclass for storing the evaluated metrics. flag : ( bool ) Determines whether this group is marked for manual review. _Image An internal Group subclass for storing image variables associated to a detection. Parameters bounds : ( list ) List of four integers corresponding to minimum row value, maximum row value, minimum column value, and maximum column value in this order. Attributes data : ( ndarray ) Subset of raw data from the FITS image identifying the group. clean : ( ndarray ) Data of the group after the denoising process. x : ( ndarray ) Index values of the 'x' position from the group data. y : ( ndarray ) Index values of the 'y' position from the group data. pos : ( ndarray ) Index values of the group data, given as (x, y). nonzero : ( ndarray ) Index values of nonzero points in the group data. ref : ( list ) List containing the minimum row value and minimum column value of the group data. limit : ( list ) List containing the maximum row value and maximum column value of the overall FITS image. _Residuals An internal Group subclass for storing residual variables associated to a detection. Parameters None Attributes data : ( ndarray ) Residuals computed in the fitting process. Precisely, they are [1 - (\"bivariate Gaussian model\" / \"group data\")]. clean : ( ndarray ) Residuals computed in the fitting process, where points outside of the ellipse are set to zero. pos : ( ndarray ) Index values of the residual data, given as (x, y). inside : ( ndarray ) Subset of index values that lie inside of the ellipse. outside : ( ndarray ) Subset of index values that lie outside of the ellipse. output : ( array_like ) List of residuals that lie inside of the ellipse; the result of the evaluation metric that is computed on this list is compared to the specified threshold; this determines which groups are flagged for manual review. _Fit An internal Group subclass for storing fit variables associated to a detection. Parameters None Attributes rv : ( multivariate_normal_frozen ) Frozen multivariable normal distribution generated from the group statistics. bvg : ( ndarray ) Results of the multivariate normal probability density function evaluated at the points specified by the group data. ellipse : ( Polygon ) Polygon object containing the points that generate an ellipse corresponding to the multivariate normal distribution. major_peaks : ( int ) Number of local maximas along the major axis of the ellipse. minor_peaks : ( int ) Number of local maximas along the minor axis of the ellipse. _Stats An internal Group subclass for storing statistics associated to a detection. Parameters None Attributes x_bar : ( float ) Average of index values in the 'x' position weighted by the corresponding group data. y_bar : ( float ) Average of index values in the 'y' position weighted by the corresponding group data. x_var : ( float ) Variance of index values in the 'x' position weighted by the corresponding group data. y_var : ( float ) Variance of index values in the 'y' position weighted by the corresponding group data. covariance : ( float ) Covariance of the index values weighted by the corresponding group data. covariance_matrix : ( array_like ) Covariance matrix for the multivariate normal that is used in the fitting process. rho : ( float ) Correlation coefficient computed from the covariance matrix. eigen_values : ( array_like ) Eigenvalues obtained from the eigendecomposition of the covariance matrix. eigen_vectors : ( array_like ) Eigenvectors obtained from the eigendecomposition of the covariance matrix. x_len : ( float ) Length of the major axis of the ellipse in pixels. y_len : ( float ) Length of the minor axis of the ellipse in pixels. radians : ( float ) Rotation of ellipse denoted in radians. degrees : ( float ) Rotation of ellipse denoted in degrees. _Metrics An internal Group subclass for storing the evaluated metrics associated to a detection. Parameters None Attributes standard_deviation : ( float ) Standard deviation of the output residuals for the group. variance : ( float ) Variance of the output residuals for the group. average : ( float ) Mean of the output residuals for the group. weighted_average : ( float ) Mean of the output residuals weighted by the group data. Params An internal ClustarData class for specifying the keyword parameters. Parameters args : ( dict ) Dictionary of keyword arguments; see 'Attributes' for keys. Attributes radius_factor : ( float ) Factor mulitplied to radius to determine cropping circle in the denoising process; must be within the range [0, 1]. chunks : ( int ) Number of chunks to use in a grid; must be an odd number. quantile : ( float ) Quantile of RMS to determine the noise level; must be within the range [0, 1]. apply_gradient : ( bool ) Determine if the FITS image should be multiplied by a gradient in order to elevate central points; similar to multiplying the FITS image by the associated 'pb' data. sigma : ( float ) Factor multiplied to noise level to determine the cutoff point, where values less than this threshold are set to zero. alpha : ( float ) Determines the size of the ellipse in relation to the chi-squared distribution; must be within the range (0, 1). buffer_size : ( int ) Number of points considered outside of the group range. For instance, given a 1-d group range of [10, 20], the algorithm checks for nonzero points within the range [5, 25] when the 'buffer_size' is 5. group_size : ( int ) Minimum number of nonzero points that determines a group. group_factor : ( float ) Ratio between [0, 1] that specifies the minimum number of nonzero points that determines a group in relation to the number of nonzero points in the largest group. metric : ( str ) Method used for evaluating the groups; must be one of the following: \"standard_deviation\" , \"variance\" , \"average\" , or \"weighted_average\" . threshold : ( float ) Cutoff point that determines which groups are flagged for manual review, given the specified metric. split_binary : ( bool ) Experimental; determine whether binary subgroups identified within a group should be split into individual groups. subgroup_factor : ( float ) Experimental; ratio between [0, 1] that specifies the subgroup range in terms of the absolute maximum intensity. evaluate_peaks : ( bool ) Experimental; determine whether the peaks of the output residuals should be taken into consideration in the flagging process. smoothing : ( int ) Experimental; size of window used in the moving average smoothing process for peak evaluation. clip : ( float ) Experimental; determines the percentage of tail values that are trimmed for peak evaluation. Raises KeyError : If specified key in args does not match the label of the specified attributes. Methods update Updates the Params object with the specified arguments and executes the entire pipeline. Parameters **kwargs : (optional) See ~clustar.core.ClustarData.params for other possible arguments. reset Resets Params object to the default values, then updates Params object with the specified arguments and executes the entire pipeline. Parameters **kwargs : (optional) See ~clustar.core.ClustarData.params for other possible arguments. identify Displays the FITS image and identifies the groups in green, orange, or red rectangles, which are defined as: 'Green' denotes that the group is not flagged for manual review 'Orange' denotes that the group is not flagged for manual review, but the group is smaller than the beam size. 'Red' denotes that the group is flagged for manual review. Beam size is the white oval shown on the bottom right corner of the FITS image. Parameters vmin : ( float , optional) Lower bound for the shown intensities. vmax : ( float , optional) Upper bound for the shown intensities. show : ( bool , optional) Determines whether the groups should be identified. If False , the rectangles identifying the groups are not drawn. dpi : ( int , optional) Dots per inch."
  },
  "documentation/denoise.html": {
    "href": "documentation/denoise.html",
    "title": "Denoise | Clustar",
    "keywords": "Denoise Clustar module for denoising-related methods. This module is designed for the ClustarData object. All listed methods take an input parameter of a ClustarData object and return a ClustarData object after processing the method. As a result, all changes are localized within the ClustarData object. crop Crops the square FITS image into a circle. Parameters cd : ( ClustarData ) ClustarData object required for processing. radius_factor : ( float , optional) Factor multiplied to radius to determine cropping circle in the denoising process; must be within the range [0, 1]. apply_gradient : ( bool , optional) Determine if the FITS image should be multiplied by a gradient in order to elevate central points; similar to multiplying the FITS image by the associated 'pb' data. Returns ClustarData compute_noise Computes the noise level by evaluating the root mean square (RMS) metric at the specified quantile on the composed grid. cd : ( ClustarData ) ClustarData object required for processing. n : ( int , optional) Number of chunks to use in a grid; must be an odd number. quantile : ( float , optional) Quantile of RMS to determine the noise level; must be within the range [0, 1]. Returns ClustarData resolve Performs the complete denoising operation on the FITS image. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData"
  },
  "documentation/fit.html": {
    "href": "documentation/fit.html",
    "title": "Fit | Clustar",
    "keywords": "Fit Clustar module for fitting-related methods. This module is designed for the ClustarData object. All listed methods take an input parameter of a ClustarData object and return a ClustarData object after processing the method. As a result, all changes are localized within the ClustarData object. compute_fit Computes the normalized bivariate gaussian fit for the Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData compute_ellipse Computes the ellipse parameters and localized residuals for the Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData compute_metrics Computes the evaluation metrics for the Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData compute_peaks Computes the number of peaks along the major and minor axes for the Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData validate Determines which Group objects are flagged for manual review by using the specified validation parameters. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData"
  },
  "documentation/graph.html": {
    "href": "documentation/graph.html",
    "title": "Graph | Clustar",
    "keywords": "Graph General module for graphing-related methods. critial_points Returns the number of smoothed critical points along the specified axis. Parameters image : ( ndarray ) Data from the FITS image. angle : ( float , optional) Degree of rotation used to specify the axis of differentiation. smoothing : ( int , optional) Size of window used in the moving average smoothing process for peak evaluation. clip : ( float , optional) Determines the percentage of tail values that are trimmed for peak evaluation. center : ( int , optional) Defines the row-wise axis of differentiation for peak evaluation. Returns list identify_groups Displays the FITS image and identifies the groups in green, orange, or red rectangles, which are defined as: 'Green' denotes that the group is not flagged for manual review 'Orange' denotes that the group is not flagged for manual review, but the group is smaller than the beam size. 'Red' denotes that the group is flagged for manual review. Beam size is the white oval shown on the bottom right corner of the FITS image. Parameters cd : ( ClustarData ) ClustarData object required for processing. vmin : ( float , optional) Lower bound for the shown intensities. vmax : ( float , optional) Upper bound for the shown intensities. show : ( bool , optional) Determines whether the groups should be identified. If False , the rectangles identifying the groups are not drawn. dpi : ( int , optional) Dots per inch."
  },
  "documentation/group.html": {
    "href": "documentation/group.html",
    "title": "Group | Clustar",
    "keywords": "Group Clustar module for grouping-related methods. This module is designed for the ClustarData object. All listed methods take an input parameter of a ClustarData object and return a ClustarData object after processing the method. As a result, all changes are localized within the ClustarData object. arrange Arrange nonzero points from the denoised FITS image into Group objects by populating the 'bounds' parameter. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData rectify Convert the dimensions of the bounds into a square. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData merge Remove nested bounds from the Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData refine Delete Group objects that do not meet the specified thresholds. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData extract Extract FITS data using the bounds variable for each Group object. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData screen Screen for Group objects that appear to be outliers; remove Group objects that are dim and distant from the center of the FITS image. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData calculate Calculate statistics using the FITS data for each Group object. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData detect Split binary groups into separate Group objects. Parameters cd : ( ClustarData ) ClustarData object required for processing. Returns ClustarData"
  },
  "documentation/search.html": {
    "href": "documentation/search.html",
    "title": "Search | Clustar",
    "keywords": "Search Contains the Clustar hierarchical class, which is responsible for transforming all available FITS images in a specified directory into their respective ClustarData objects. Clustar class uses multithreading to expedite the processing of the FITS images. Clustar A class for executing the entire pipline for detecting groups from a directory of FITS files and for storing all relevant data associated with each file. Parameters **kwargs : (optional) Same as ~clustar.core.ClustarData.params arguments. Copy of that documentation is listed below for convenience. Keywords radius_factor : ( float ) Factor mulitplied to radius to determine cropping circle in the denoising process; must be within the range [0, 1]. chunks : ( int ) Number of chunks to use in a grid; must be an odd number. quantile : ( float ) Quantile of RMS to determine the noise level; must be within the range [0, 1]. apply_gradient : ( bool ) Determine if the FITS image should be multiplied by a gradient in order to elevate central points; similar to multiplying the FITS image by the associated 'pb' data. sigma : ( float ) Factor multiplied to noise level to determine the cutoff point, where values less than this threshold are set to zero. alpha : ( float ) Determines the size of the ellipse in relation to the chi-squared distribution; must be within the range (0, 1). buffer_size : ( int ) Number of points considered outside of the group range. For instance, given a 1-d group range of [10, 20], the algorithm checks for nonzero points within the range [5, 25] when the 'buffer_size' is 5. group_size : ( int ) Minimum number of nonzero points that determines a group. group_factor : ( float ) Ratio between [0, 1] that specifies the minimum number of nonzero points that determines a group in relation to the number of nonzero points in the largest group. metric : ( str ) Method used for evaluating the groups; must be one of the following: \"standard_deviation\" , \"variance\" , \"average\" , or \"weighted_average\" . threshold : ( float ) Cutoff point that determines which groups are flagged for manual review, given the specified metric. split_binary : ( bool ) Experimental; determine whether binary subgroups identified within a group should be split into individual groups. subgroup_factor : ( float ) Experimental; ratio between [0, 1] that specifies the subgroup range in terms of the absolute maximum intensity. evaluate_peaks : ( bool ) Experimental; determine whether the peaks of the output residuals should be taken into consideration in the flagging process. smoothing : ( int ) Experimental; size of window used in the moving average smoothing process for peak evaluation. clip : ( float ) Experimental; determines the percentage of tail values that are trimmed for peak evaluation. Attributes data : ( list ) List of ClustarData objects corresponding to the FITS file in the directory. errors : ( list ) List of FITS files that raised an error in the processing. Examples from clustar.search import Clustar # Setup 'Clustar' object. cs = Clustar(radius_factor=0.95, threshold=0.025) # Execute pipeline on directory containing FITS files. cs.run(directory='~/data/') # Access individual 'ClustarData' objects. cs.data # Check which FITS files raised an error. cs.errors # Inspect 'ClustarData' variables for all groups in each FITS file. cs.display(category='all') run Main Clustar method for executing the pipeline for group detection. Parameters directory : ( str ) Path to folder containing FITS files. Raises AssertionError : If there are no FITS files at the specified directory. display Generates a Pandas data frame object containing the specified variables. Parameters category : ( str , optional) If category is \"summary\" , then a subset of ClustarData variables are returned in the data frame. If category is \"all\" , then all singular ClustarData variables are returned in the data frame. Returns DataFrame"
  },
  "index.html": {
    "href": "index.html",
    "title": "Clustar | Clustar",
    "keywords": "Clustar Release: 1.2.1 Date: June 27, 2021 Overview A python package for processing and analyzing protostars/protoplanetary disks in astronomical data in Flexible Image Transport System (FITS) images. These files contain grayscale images represented as two-dimensional arrays, with each pixel containing the intensity values, and headers containing the telescope observational parameters. Clustar simplifies and expediates the identification pipeline of FITS files by automating the preprocessing, grouping, and fitting for a large amount of FITS files. Requirements Clustar 1.2.1 requires GEOS >= 3.3 Shapely >= 1.7.1 Both of these dependencies are available on https://anaconda.org/conda-forge . conda install -c conda-forge geos conda install -c conda-forge shapely Installation Clustar is available on PyPI and can be installed using pip : pip install clustar Singular Usage Detect celestial objects in a singular FITS image by creating a ClustarData object. from clustar.core import ClustarData # Create the 'ClustarData' object by specifying the path to FITS file. cd = ClustarData(path='~/data/example.fits', threshold=0.025) # Visualize the detected groups. cd.identify() # Access individual 'Group' objects. cd.groups Multiple Usage Detect celestial objects in a directory containing multiple FITS images by creating a Clustar object. from clustar.search import Clustar # Setup 'Clustar' object. cs = Clustar(radius_factor=0.95, threshold=0.025) # Execute pipeline on directory containing FITS files. cs.run(directory='~/data/') # Access individual 'ClustarData' objects. cs.data # Check which FITS files raised an error. cs.errors # Inspect 'ClustarData' variables for all groups in each FITS file. cs.display(category='all') Modules base.py Internal module for testing clustar modules. core.py Contains the ClustarData class, which is responsible for executing the entire project pipeline for detecting groups in a single FITS image. denoise.py Clustar module for denoising-related methods. fit.py Clustar module for fitting-related methods. graph.py General module for graphing-related methods. group.py Clustar module for grouping-related methods. search.py Contains the Clustar hierarchical class, which is responsible for transforming all available FITS images in a specified directory into their respective ClustarData objects. Notes Visit https://clustar.github.io/ for additional information."
  },
  "usage/examples.html": {
    "href": "usage/examples.html",
    "title": "Usage | Clustar",
    "keywords": "Usage FITS Files from ALMA Science Archive Visit this page to learn more on how to download FITS files from the ALMA Science Archive . Click here to download this notebook. Singular FITS File Detect celestial objects in a singular FITS image by creating a ClustarData object. from clustar.core import ClustarData # Create the 'ClustarData' object by specifying the path to FITS file. cd = ClustarData(path='~/data/example.fits', threshold=0.025) # Visualize the detected groups. cd.identify() # Access individual 'Group' objects. cd.groups Multiple FITS Files Detect celestial objects in a directory containing multiple FITS images by creating a Clustar object. from clustar.search import Clustar # Setup 'Clustar' object. cs = Clustar(radius_factor=0.95, threshold=0.025) # Execute pipeline on directory containing FITS files. cs.run(directory='~/data/') # Access individual 'ClustarData' objects. cs.data # Check which FITS files raised an error. cs.errors # Inspect 'ClustarData' variables for all groups in each FITS file. cs.display(category='all') t-SNE on Clustar Output Visit this notebook to learn more on how to apply t-SNE on the extracted groups from the Clustar package."
  }
}